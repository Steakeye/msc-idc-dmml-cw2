library("e1071")
library("caret")
library("RWeka")
library("rpart.plot")
library("libcoin")
library("partykit")
#method = 'J48'
#as.factor(
dt.c4_5_h <- J48(rings~., holdout.training)
#method = 'J48'
#as.factor(
#dt.c4_5_h <- J48(rings~., holdout.training)
dt.c4_5_h <- J48(as.factor(rings)~., holdout.training)
#dt.c4_5_h2 <- train(as.factor(rings) ~., method="J48", holdout.training, tuneLength = 8)
#dt.c4_5_h <- train(rings ~., method="J48", data=holdout.training, tuneLength = 8)
#dt.c4_5_h
#dt.c4_5_h2$finalModel
dt.c4_5_h
#method = 'J48'
#as.factor(
#dt.c4_5_h <- J48(rings~., holdout.training)
dt.c4_5_h <- J48(as.factor(rings)~., holdout.training)
dt.c4_5_h2 <- train(as.factor(rings) ~., method="J48", holdout.training, tuneLength = 8)
#dt.c4_5_h <- train(rings ~., method="J48", data=holdout.training, tuneLength = 8)
#dt.c4_5_h
#dt.c4_5_h2$finalModel
dt.c4_5_h
dt.c4_5_h2
summary(dt.c4_5_h)
dt.c4_5_h2$finalModel
dt.c4_5_h$finalModel
plot(dt.c4_5_h)
plot(dt.c4_5_h$finalModel)
View(dt.c4_5_h2)
dt.c4_5_h$finalModel
dt.c4_5_h
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = dataTest)
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
table(dt.c4_5_h_test$classAttribute, dataTest.pred)
dt.c4_5_h_test
dt.c4_5_h_test$classAttribute
length(dt.c4_5_h_test)
summary(dt.c4_5_h_test)
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
table(dt.c4_5_h_test, holdout.testing$rings)
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
table(dt.c4_5_h_test, holdout.testing$rings)
confusionMatrix(dt.c4_5_h_test, holdout.testing$rings)
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
holdout.test_rings <- holdout.testing$rings
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
table(dt.c4_5_h_test, holdout.test_rings)
#confusionMatrix(dt.c4_5_h_test, holdout.testing$rings)
table(factor(dt.c4_5_h_test, levels=min(holdout.test_rings):max(holdout.test_rings)), factor(holdout.test_rings, levels=min(holdout.test_rings):max(holdout.test_rings)))
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
holdout.test_rings <- holdout.testing$rings
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
table(dt.c4_5_h_test, holdout.test_rings)
#confusionMatrix(dt.c4_5_h_test, holdout.testing$rings)
table(factor(dt.c4_5_h_test, levels=min(holdout.test_rings):max(holdout.test_rings)), factor(holdout.test_rings, levels=min(holdout.test_rings):max(holdout.test_rings)))
confusionMatrix(factor(dt.c4_5_h_test, levels=min(holdout.test_rings):max(holdout.test_rings)), factor(holdout.test_rings, levels=min(holdout.test_rings):max(holdout.test_rings)))
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
holdout.test_rings <- holdout.testing$rings
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
table(dt.c4_5_h_test, holdout.test_rings)
#confusionMatrix(dt.c4_5_h_test, holdout.testing$rings)
#table(factor(dt.c4_5_h_test, levels=min(holdout.test_rings):max(holdout.test_rings)), factor(holdout.test_rings, levels=min(holdout.test_rings):max(holdout.test_rings)))
holdout.test_levels <- min(holdout.test_rings):max(holdout.test_rings)
confusionMatrix(factor(dt.c4_5_h_test, levels=holdout.test_levels), factor(holdout.test_rings))
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
holdout.test_rings <- holdout.testing$rings
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
table(dt.c4_5_h_test, holdout.test_rings)
#confusionMatrix(dt.c4_5_h_test, holdout.testing$rings)
#table(factor(dt.c4_5_h_test, levels=min(holdout.test_rings):max(holdout.test_rings)), factor(holdout.test_rings, levels=min(holdout.test_rings):max(holdout.test_rings)))
holdout.test_levels <- min(holdout.test_rings):max(holdout.test_rings)
confusionMatrix(factor(dt.c4_5_h_test, levels=holdout.test_levels), factor(holdout.test_rings, levels = holdout.test_levels))
plot(dt.c4_5_h)
summary(dt.c4_5_h)
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
#holdout.test_rings <- holdout.testing$rings
dt.c4_5_h2_test <- predict(dt.c4_5_h2, newdata = holdout.testing)
table(dt.c4_5_h2_test, holdout.test_rings)
#confusionMatrix(dt.c4_5_h_test, holdout.testing$rings)
#table(factor(dt.c4_5_h_test, levels=min(holdout.test_rings):max(holdout.test_rings)), factor(holdout.test_rings, levels=min(holdout.test_rings):max(holdout.test_rings)))
#holdout.test_levels <- min(holdout.test_rings):max(holdout.test_rings)
confusionMatrix(factor(dt.c4_5_h2_test, levels=holdout.test_levels), factor(holdout.test_rings, levels = holdout.test_levels))
#plot(dt.c4_5_h$finalModel, box.palette = "Reds", tweak = 1.2)
holdout.test_rings <- holdout.testing$rings
dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
table(dt.c4_5_h_test, holdout.test_rings)
#confusionMatrix(dt.c4_5_h_test, holdout.testing$rings)
#table(factor(dt.c4_5_h_test, levels=min(holdout.test_rings):max(holdout.test_rings)), factor(holdout.test_rings, levels=min(holdout.test_rings):max(holdout.test_rings)))
holdout.test_levels <- min(holdout.test_rings):max(holdout.test_rings)
confusionMatrix(factor(dt.c4_5_h_test, levels=holdout.test_levels), factor(holdout.test_rings, levels = holdout.test_levels))
dt.c4_5_h2_fm <- dt.c4_5_h2$finalModel
dt.c4_5_h2_fm_test <- predict(dt.c4_5_h2_fm, newdata = holdout.testing)
dt.c4_5_h2_fm
prp(dt.c4_5_h2_fm)
knitr::opts_chunk$set(echo = TRUE)
set.seed(4321)
mirrorUrl = "http://cran.ma.imperial.ac.uk"
# Install and load all packages up-front!
if(!require(readxl)) install.packages("readxl", repos = mirrorUrl)
if(!require(Metrics)) install.packages("Metrics", repos = mirrorUrl)
if(!require(gridExtra)) install.packages("gridExtra", repos = mirrorUrl)
if(!require(scales)) install.packages("scales", repos = mirrorUrl)
if(!require(data.table)) install.packages("data.table", repos = mirrorUrl)
if(!require(ggplot2)) install.packages("ggplot2", repos = mirrorUrl)
if(!require(caret)) install.packages("caret", repos = mirrorUrl)
#
library("readxl")
library("Metrics")
library("scales")
library("data.table")
library(ggplot2)
library(grid)
library(gridExtra)
library(knitr)
library(caret)
abalone_data = data.frame(read.table("../assets/data/abalone.data", sep = ","))
abalone_attr_names = c("sex", "length", "diameter", "height", "weight.whole", "weight.shucked", "weight.viscera", "weight.shell", "rings")
colnames(abalone_data) = abalone_attr_names
#We need to check there are no missing values, as if any instances are incomlete we will need to remove
missing_vals = sum(is.na(abalone_data))
print(c("Number of missing values:", missing_vals), quote = FALSE)
head(abalone_data)
abalone_summary = summary(abalone_data)
grid.table(abalone_summary)
kable(abalone_summary)
abalone_numeric_attr <- abalone_attr_names[which(abalone_attr_names!="sex")]
for (abalone_attr in abalone_numeric_attr)
{
bad_vals = abalone_data[abalone_data[abalone_attr] == 0, ]
#col_data = unlist(abalone_data[abalone_attr])
if (nrow(bad_vals) > 0)
{
print(abalone_attr)
print(abalone_data[abalone_data[abalone_attr] == 0, ])
}
}
rm(bad_vals)
abalone_data$height[abalone_data$height==0] = NA
abalone_data = na.omit(abalone_data)
abalone_data_bad_weight = abalone_data[(abalone_data$weight.whole - (abalone_data$weight.shucked + abalone_data$weight.viscera + abalone_data$weight.shell)) < 0,]
head(abalone_data_bad_weight)
print(paste(c("Number of instances where total weight is less than constiuent weights:", nrow(abalone_data_bad_weight)), sep = ""), quote = FALSE)
abalone_data <- abalone_data[!(abalone_data$weight.whole - (abalone_data$weight.shucked + abalone_data$weight.viscera + abalone_data$weight.shell)) < 0,]
#boxplot(scale(abalone_data), main="Looking at the data graphically", xlab="Abalone Attributes", ylab="Values")
plot(abalone_data$sex)
for (abalone_attr in abalone_numeric_attr)
{
#print(abalone_attr)
col_data = unlist(abalone_data[abalone_attr])
#print(col_data)
plot(density(col_data), xlab=abalone_attr, main=paste(c("Density of ", abalone_attr), collapse = ''))
}
rm(abalone_attr)
rm(col_data)
#Create a list to populate with our tail neighbour distances
tail_deltas <- c()
abalone_data_no_sex = abalone_data[, -1]
for (attrib in abalone_data_no_sex) {
#get the last two values
data_tails <- tail(sort(attrib),2)
#push the delta on to our list
tail_deltas <- c(tail_deltas, diff(data_tails))
}
#grab out attribute keys to include in our new table/frame
attributes <- names(abalone_data_no_sex)
#make a new dataframe from
dataframe <- data.frame(attributes = attributes, tail_neighbour_d=tail_deltas)
#get the order for the nearest neighbour starting with the greatest distance and descending
neighbour_order <- order(dataframe$tail_neighbour_d, decreasing=TRUE)
#now apply the order to the frame
sorted_attributes_by_neighbour_d <- dataframe[ neighbour_order, ]
sorted_attributes_by_neighbour_d
boxplot(abalone_data$height)
abalone_data_cleansed <- abalone_data[ abalone_data$height < .5, ]
boxplot(abalone_data_cleansed$height)
qplot(x = length,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = diameter,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = height,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = weight.whole,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = weight.shucked,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = weight.viscera,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = weight.shell,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
abalone.lm_length <- lm(data = abalone_data_cleansed, formula = rings ~ length)
abalone.lm_diameter <- lm(data = abalone_data_cleansed, formula = rings ~ diameter)
abalone.lm_height <- lm(data = abalone_data_cleansed, formula = rings ~ height)
abalone.lm_weight.whole <- lm(data = abalone_data_cleansed, formula = rings ~ weight.whole)
abalone.lm_weight.shucked <- lm(data = abalone_data_cleansed, formula = rings ~ weight.shucked)
abalone.lm_weight.viscera <- lm(data = abalone_data_cleansed, formula = rings ~ weight.viscera)
abalone.lm_weight.shell <- lm(data = abalone_data_cleansed, formula = rings ~ weight.shell)
abalone.r_squareds <- c(
summary(abalone.lm_length)$adj.r.squared,
summary(abalone.lm_diameter)$adj.r.squared,
summary(abalone.lm_height)$adj.r.squared,
summary(abalone.lm_weight.whole)$adj.r.squared,
summary(abalone.lm_weight.shucked)$adj.r.squared,
summary(abalone.lm_weight.viscera)$adj.r.squared,
summary(abalone.lm_weight.shell)$adj.r.squared
)
abalone_numeric_attr_no_rings <- abalone_numeric_attr[which(abalone_numeric_attr!="rings")]
#make a new dataframe from
dataframe.rsquareds <- data.frame(attributes = abalone_numeric_attr_no_rings, r_squared=abalone.r_squareds)
#get the order for the nearest neighbour starting with the greatest distance and descending
rsquareds_order <- order(dataframe.rsquareds$r_squared, decreasing=TRUE)
#now apply the order to the frame
sorted_attributes_by_r_squared <- dataframe.rsquareds[ rsquareds_order, ]
sorted_attributes_by_r_squared
#abalone.lm_length
# calculate correlation matrix
correlationMatrix <- cor(abalone_data_cleansed[,2:9])
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally &gt;0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
abalone.correlation <- data.frame(correlation=correlationMatrix[,8])
#get rid of rings, that's obviously going to be max correlation to itself!
abalone.correlation <- data.frame(attributes=rownames(abalone.correlation)[1:7], 'correlation to rings'=abalone.correlation[1:7, 0:1])
#get the order for correlations
correlation_order <- order(abalone.correlation$correlation, decreasing=TRUE)
#now apply the order to the frame
sorted_correlation_order <- abalone.correlation[ correlation_order, 1:2]
print(sorted_correlation_order)
abalone_data_cleansed[abalone_data_cleansed$rings < 10]
abalone_data_cleansed[abalone_data_cleansed$rings < 10, ]
abalone_data_cleansed_age_groups <- abalone_data_cleansed
#abalone_data_cleansed_age_groups$age_group
abalone_data_cleansed[. abalone_data_cleansed$rings < 10]
abalone_data_cleansed[, abalone_data_cleansed$rings < 10]
#cut(df$a, breaks=c(-Inf, 0.5, 0.6, Inf), labels=c("low","middle","high"))
#abalone_data_cleansed[abalone_data_cleansed$rings < 10]
cut(abalone_data_cleansed$rings, breaks=c(-Inf, 9, 19, Inf), labels=c("young","middle","old"))
abalone_data_cleansed_age_groups <- abalone_data_cleansed
#abalone_data_cleansed_age_groups$age_group
#cut(df$a, breaks=c(-Inf, 0.5, 0.6, Inf), labels=c("low","middle","high"))
#abalone_data_cleansed[abalone_data_cleansed$rings < 10]
cut(abalone_data_cleansed$rings, breaks=c(-Inf, 9, 19, Inf), labels=c("young","middle","old"))
abalone_data_cleansed_age_groups <- subset(abalone_data_cleansed, select=-rings)
#abalone_data_cleansed_age_groups$age_group
#cut(df$a, breaks=c(-Inf, 0.5, 0.6, Inf), labels=c("low","middle","high"))
#abalone_data_cleansed[abalone_data_cleansed$rings < 10]
abalone_age_groups <- cut(abalone_data_cleansed$rings, breaks=c(-Inf, 9, 19, Inf), labels=c("young","middle","old"))
abalone_data_cleansed_age_groups <- subset(abalone_data_cleansed, select=-rings)
abalone_data_cleansed_age_groups$age_group <- abalone_age_groups
rm(abalone_age_groups)
#abalone_data_cleansed_age_groups$age_group
dt.c4_5_h3 <- train(as.factor(rings) ~., method="C4.5", holdout.training, tuneLength = 8)
#method = 'J48'
#as.factor(
#dt.c4_5_h <- J48(rings~., holdout.training)
dt.c4_5_h <- J48(as.factor(rings)~., holdout.training)
#method = 'J48'
#as.factor(
#dt.c4_5_h <- J48(rings~., holdout.training)
dt.c4_5_j48_h <- J48(as.factor(rings)~., holdout.training)
summary(dt.c4_5_j48_h)
dt.c4_5_h
dt.c4_5_h2$finalModel
summary(dt.c4_5_h)
summary(dt.c4_5_h2$finalModel)
summary(dt.c4_5_h)
summary(dt.c4_5_h2$finalModel)
summary(dt.c4_5_h2)
summary(dt.c4_5_h)
summary(dt.c4_5_h$finalModel)
summary(dt.c4_5_h2)
summary(dt.c4_5_h)
summary(dt.c4_5_h$finalModel)
summary(dt.c4_5_h2)
summary(dt.c4_5_h2$finalModel)
dt.c4_5_h$finalModel
summary(dt.c4_5_h)
summary(dt.c4_5_h2)
summary(dt.c4_5_h2$finalModel)
summary(dt.c4_5_j48_h)
summary(dt.c4_5_h2)
summary(dt.c4_5_h2$finalModel)
#method = 'J48'
#as.factor(
#dt.c4_5_h <- J48(rings~., holdout.training)
dt.c4_5_j48_h <- J48(as.factor(rings)~., holdout.training)
dt.c4_5_h2 <- train(as.factor(rings) ~., method="J48", holdout.training, tuneLength = 8)
#dt.c4_5_h <- train(rings ~., method="J48", data=holdout.training, tuneLength = 8)
#dt.c4_5_h
#dt.c4_5_h2$finalModel
View(dataframe)
dt.c4_5_j48_h <- J48(as.factor(rings)~., holdout.training)
holdout.training
dt.c4_5_j48_h <- J48(as.factor(rings)~., holdout.training)
if(!require(rJava)) install.packages('rJava')
if(!require(caret)) install.packages("caret", repos = mirrorUrl)
if(!require(RWeka)) install.packages("RWeka", repos = mirrorUrl)
#e1071
if(!require(e1071)) install.packages("e1071", repos = mirrorUrl)
#libcoin
if(!require(coin)) install.packages("coin", repos = mirrorUrl)
#partykit
if(!require(partykit)) install.packages("partykit", repos = mirrorUrl)
#rpart
if(!require(rpart.plot)) install.packages("rpart.plot", repos = mirrorUrl)
#
library("e1071")
library("caret")
library("RWeka")
library("rpart.plot")
library("libcoin")
library("partykit")
dt.c4_5_j48_h <- J48(as.factor(rings)~., holdout.training)
dt_sum.c4_5_j48_h <- summary(dt.c4_5_j48_h)
View(dt_sum.c4_5_j48_h)
View(dt.c4_5_j48_h)
dt.c4_5_j48_h
dt.c4_5_h2
dt.c4_5_h2$method
dt.c4_5_h2$modelType
dt.c4_5_h2$modelInfo
dt.c4_5_h2$results
dt.c4_5_h2$levels
dt.c4_5_h2$times
dt.c4_5_h2$pred
dt.c4_5_h2$bestTune
dt.c4_5_h2$results
head(dt.c4_5_h2)
head(dt.c4_5_h2)
dt.c4_5_h2
View(abalone_data_cleansed)
dt.c4_5_h2$results
dt.c4_5_h2
dt.c4_5_h2$bestTune
sumary(dt.c4_5_h2)
summary(dt.c4_5_h2)
View(dt.c4_5_h2)
dt.c4_5_h2
dt.c4_5_h2
rm(dt.c4_5_h)
dt_sum.c4_5_j48_h
dt_sum.c4_5_j48_h$details
dt_sum.c4_5_j48_h$details$pctCorrect
summary(dt_sum.c4_5_j48_h$details)
summary(dt_sum.c4_5_j48_h)
text(dt_sum.c4_5_j48_h)
View(dt.c4_5_j48_h)
dt.c4_5_j48_h
dt.c4_5_h2
dt.c4_5_h2$finalModel
View(dt.c4_5_j48_h)
dt.c4_5_j48_h <- J48(as.factor(rings)~., holdout.training)
dt_sum.c4_5_j48_h <- summary(dt.c4_5_j48_h)
dt.c4_5_j48_h_party <- as.party(dt.c4_5_j48_h)
View(dt.c4_5_j48_h_party)
dt.c4_5_j48_h_party
length(dt.c4_5_j48_h_party)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
set.seed(4321)
if(!require(rJava)) install.packages('rJava')
if(!require(caret)) install.packages("caret", repos = mirrorUrl)
if(!require(RWeka)) install.packages("RWeka", repos = mirrorUrl)
#e1071
if(!require(e1071)) install.packages("e1071", repos = mirrorUrl)
#libcoin
if(!require(coin)) install.packages("coin", repos = mirrorUrl)
#partykit
if(!require(partykit)) install.packages("partykit", repos = mirrorUrl)
#rpart
if(!require(rpart.plot)) install.packages("rpart.plot", repos = mirrorUrl)
#
library("e1071")
library("caret")
library("RWeka")
library("rpart.plot")
library("libcoin")
library("partykit")
#set.seed(1958)  # set a seed to get replicable results
#train <- createFolds(iris$Species, k=10)
#C45Fit <- train(Species ~., method="J48", data=iris,
#                tuneLength = 5,
#                trControl = trainControl(
#                  method="cv", indexOut=train))
test.c4_5 <- J48(Species ~., iris)
dt.c4_5_j48_h <- J48(as.factor(rings)~., holdout.training)
dt_sum.c4_5_j48_h <- summary(dt.c4_5_j48_h)
dt.c4_5_j48_h_party <- as.party(dt.c4_5_j48_h)
dt.c4_5_j48_h
dt.c4_5_h2 <- train(as.factor(rings) ~., method="J48", holdout.training, tuneLength = 8)
dt_sum.c4_5_h2 <- summary(dt.c4_5_h2)
dt_sum.c4_5_h2_final <- summary(dt.c4_5_h2$finalModel)
dt.c4_5_h2
dt.c4_5_h2$finalModel
dt_sum.c4_5_j48_h
dt_sum.c4_5_h2
#dt_sum.c4_5_h2_final
#holdout.test_rings <- holdout.testing$rings
#dt.c4_5_h_test <- predict(dt.c4_5_h, newdata = holdout.testing)
#table(dt.c4_5_h_test, holdout.test_rings)
#holdout.test_levels <- min(holdout.test_rings):max(holdout.test_rings)
#confusionMatrix(factor(dt.c4_5_h_test, levels=holdout.test_levels), factor(holdout.test_rings, levels = holdout.test_levels))
#dt.c4_5_h2_test <- predict(dt.c4_5_h2, newdata = holdout.testing)
#table(dt.c4_5_h2_test, holdout.test_rings)
#confusionMatrix(factor(dt.c4_5_h2_test, levels=holdout.test_levels), factor(holdout.test_rings, levels = holdout.test_levels))
#dt.c4_5_h2_fm <- dt.c4_5_h2$finalModel
#dt.c4_5_h2_fm_test <- predict(dt.c4_5_h2_fm, newdata = holdout.testing)
#table(dt.c4_5_h2_fm_test, holdout.test_rings)
#confusionMatrix(factor(dt.c4_5_h2_fm_test, levels=holdout.test_levels), factor(holdout.test_rings, levels = holdout.test_levels))
length(dt.c4_5_j48_h_party)
width(dt.c4_5_j48_h_party)
depth(dt.c4_5_j48_h_party)
dt.c4_5_h2$finalModel
View(dt_sum.c4_5_h2_final)
View(dt_sum.c4_5_j48_h)
dt.c4_5_h2
dt.c4_5_h2$finalModel
dt.c4_5_h2_party <- as.party(dt.c4_5_h2)
View(dataframe.rsquareds)
View(dt.c4_5_h2)
View(dt_sum.c4_5_h2_final)
View(dt_sum.c4_5_j48_h)
View(dt.c4_5_h2_fm)
View(dt.c4_5_h2_fm)
View(dt.c4_5_h2_fm)
View(dt.c4_5_h2)
dt.c4_5_h2
dt.c4_5_h2$finalModel
dt.c4_5_h2_party <- as.party(dt.c4_5_h2$finalModel)
length(dt.c4_5_j48_h_party)
width(dt.c4_5_j48_h_party)
depth(dt.c4_5_j48_h_party)
dt.c4_5_h2
dt.c4_5_h2$finalModel
dt.c4_5_h2
dt.c4_5_h2_finalModel <- dt.c4_5_h2$finalModel
dt.c4_5_h2_party <- as.party(dt.c4_5_h2$finalModel)
length(dt.c4_5_j48_h_party)
width(dt.c4_5_j48_h_party)
depth(dt.c4_5_j48_h_party)
View(dt.c4_5_h2_finalModel)
dt.c4_5_h2
dt.c4_5_h2_finalModel <- dt.c4_5_h2$finalModel
dt.c4_5_h2_party <- as.party(dt.c4_5_h2$finalModel)
length(dt.c4_5_h2_party)
width(dt.c4_5_h2_party)
depth(dt.c4_5_h2_party)
dt.c4_5_h2
dt.c4_5_h2_finalModel <- dt.c4_5_h2$finalModel
dt.c4_5_h2_finalModel
dt.c4_5_h2_party <- as.party(dt.c4_5_h2$finalModel)
length(dt.c4_5_h2_party)
width(dt.c4_5_h2_party)
depth(dt.c4_5_h2_party)
#dt.c4_5_h2
dt.c4_5_h2_finalModel <- dt.c4_5_h2$finalModel
#dt.c4_5_h2_finalModel
dt.c4_5_h2_finalModel_party <- as.party(dt.c4_5_h2$finalModel)
length(dt.c4_5_h2_finalModel_party)
width(dt.c4_5_h2_finalModel_party)
depth(dt.c4_5_h2_finalModel_party)
plot(dt.c4_5_h2_finalModel)
#dt.c4_5_h2_finalModel_party
plot(dt.c4_5_h2_finalModel)
plot(dt.c4_5_h2_finalModel_party)
#plot(dt.c4_5_h2_finalModel)
plot(dt.c4_5_h2_finalModel_party)
dt_sum.c4_5_j48_h
dt_sum.c4_5_h2
#dt_sum.c4_5_h2_final
View(dt_sum.c4_5_j48_h)
dt_sum.c4_5_j48_h$details
dt_sum.c4_5_j48_h$details$pctCorrect
dt_sum.c4_5_j48_h$details[1]
dt_sum.c4_5_j48_h$details[1]
dt_sum.c4_5_h2$details[1]
