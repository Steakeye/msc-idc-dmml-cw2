getwd()
install.packages("customOutput", repos = NULL, type="source")
install.packages("./customOutput", repos = NULL, type="source")
install.packages("/home/steakeye/work/study/msc-idc/dmml/cw2/customOutput", repos = NULL, type="source")
install.packages("/home/steakeye/work/study/msc-idc/dmml/cw2/customOutput/customOutput", repos = NULL, type="source")
install.packages("/home/steakeye/work/study/msc-idc/dmml/cw2/customOutput/R/customOutput", repos = NULL, type="source")
install.packages("/home/steakeye/work/study/msc-idc/dmml/cw2/customOutput/R/customOutput.R", repos = NULL, type="source")
install.from.file(pkg = file.choose(), binary=FALSE)
LIBRARY(install.from.file)
library(install.from.file)
library(utils)
install.from
install.packages("~/work/study/msc-idc/dmml/cw2/r/customOutput_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(customOutput)
customOutput::html5
mirrorUrl = "http://cran.ma.imperial.ac.uk"
# Install and load all packages up-front!
if(!require(readxl)) install.packages("readxl", repos = mirrorUrl)
if(!require(Metrics)) install.packages("Metrics", repos = mirrorUrl)
if(!require(gridExtra)) install.packages("gridExtra", repos = mirrorUrl)
if(!require(scales)) install.packages("scales", repos = mirrorUrl)
if(!require(data.table)) install.packages("data.table", repos = mirrorUrl)
if(!require(ggplot2)) install.packages("ggplot2", repos = mirrorUrl)
if(!require(caret)) install.packages("caret", repos = mirrorUrl)
#
library("readxl")
library("Metrics")
library("scales")
library("data.table")
library(ggplot2)
library(grid)
library(gridExtra)
library(knitr)
library(caret)
detach("package:customOutput", unload=TRUE)
library("customOutput", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("~/work/study/msc-idc/dmml/cw2/r/customOutput_0.0.0.9000.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
set.seed(4321)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
set.seed(4321)
knit_with_parameters('~/work/study/msc-idc/dmml/cw2/src/main.Rmd')
knitr::opts_chunk$set(echo = TRUE)
set.seed(4321)
mirrorUrl = "http://cran.ma.imperial.ac.uk"
# Install and load all packages up-front!
if(!require(readxl)) install.packages("readxl", repos = mirrorUrl)
if(!require(Metrics)) install.packages("Metrics", repos = mirrorUrl)
if(!require(gridExtra)) install.packages("gridExtra", repos = mirrorUrl)
if(!require(scales)) install.packages("scales", repos = mirrorUrl)
if(!require(data.table)) install.packages("data.table", repos = mirrorUrl)
if(!require(ggplot2)) install.packages("ggplot2", repos = mirrorUrl)
if(!require(caret)) install.packages("caret", repos = mirrorUrl)
#
library("readxl")
library("Metrics")
library("scales")
library("data.table")
library(ggplot2)
library(grid)
library(gridExtra)
library(knitr)
library(caret)
abalone_data = data.frame(read.table("../assets/data/abalone.data", sep = ","))
abalone_attr_names = c("sex", "length", "diameter", "height", "weight.whole", "weight.shucked", "weight.viscera", "weight.shell", "rings")
colnames(abalone_data) = abalone_attr_names
#We need to check there are no missing values, as if any instances are incomlete we will need to remove
missing_vals = sum(is.na(abalone_data))
print(c("Number of missing values:", missing_vals), quote = FALSE)
head(abalone_data)
abalone_summary = summary(abalone_data)
grid.table(abalone_summary)
kable(abalone_summary)
abalone_numeric_attr <- abalone_attr_names[which(abalone_attr_names!="sex")]
for (abalone_attr in abalone_numeric_attr)
{
bad_vals = abalone_data[abalone_data[abalone_attr] == 0, ]
#col_data = unlist(abalone_data[abalone_attr])
if (nrow(bad_vals) > 0)
{
print(abalone_attr)
print(abalone_data[abalone_data[abalone_attr] == 0, ])
}
}
rm(bad_vals)
abalone_data$height[abalone_data$height==0] = NA
abalone_data = na.omit(abalone_data)
abalone_data_bad_weight = abalone_data[(abalone_data$weight.whole - (abalone_data$weight.shucked + abalone_data$weight.viscera + abalone_data$weight.shell)) < 0,]
head(abalone_data_bad_weight)
print(paste(c("Number of instances where total weight is less than constiuent weights:", nrow(abalone_data_bad_weight)), sep = ""), quote = FALSE)
abalone_data <- abalone_data[!(abalone_data$weight.whole - (abalone_data$weight.shucked + abalone_data$weight.viscera + abalone_data$weight.shell)) < 0,]
#boxplot(scale(abalone_data), main="Looking at the data graphically", xlab="Abalone Attributes", ylab="Values")
plot(abalone_data$sex)
for (abalone_attr in abalone_numeric_attr)
{
#print(abalone_attr)
col_data = unlist(abalone_data[abalone_attr])
#print(col_data)
plot(density(col_data), xlab=abalone_attr, main=paste(c("Density of ", abalone_attr), collapse = ''))
}
rm(abalone_attr)
rm(col_data)
#Create a list to populate with our tail neighbour distances
tail_deltas <- c()
abalone_data_no_sex = abalone_data[, -1]
for (attrib in abalone_data_no_sex) {
#get the last two values
data_tails <- tail(sort(attrib),2)
#push the delta on to our list
tail_deltas <- c(tail_deltas, diff(data_tails))
}
#grab out attribute keys to include in our new table/frame
attributes <- names(abalone_data_no_sex)
#make a new dataframe from
dataframe <- data.frame(attributes = attributes, tail_neighbour_d=tail_deltas)
#get the order for the nearest neighbour starting with the greatest distance and descending
neighbour_order <- order(dataframe$tail_neighbour_d, decreasing=TRUE)
#now apply the order to the frame
sorted_attributes_by_neighbour_d <- dataframe[ neighbour_order, ]
sorted_attributes_by_neighbour_d
boxplot(abalone_data$height)
abalone_data_cleansed <- abalone_data[ abalone_data$height < .5, ]
boxplot(abalone_data_cleansed$height)
qplot(x = length,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = diameter,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = height,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = weight.whole,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = weight.shucked,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = weight.viscera,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
qplot(x = weight.shell,
y = rings,
data = abalone_data_cleansed,
alpha = I(0.2), # alpha to help convery density
geom = "jitter") + # jitter so points don't stack so much
geom_smooth(method = lm)
abalone.lm_length <- lm(data = abalone_data_cleansed, formula = rings ~ length)
abalone.lm_diameter <- lm(data = abalone_data_cleansed, formula = rings ~ diameter)
abalone.lm_height <- lm(data = abalone_data_cleansed, formula = rings ~ height)
abalone.lm_weight.whole <- lm(data = abalone_data_cleansed, formula = rings ~ weight.whole)
abalone.lm_weight.shucked <- lm(data = abalone_data_cleansed, formula = rings ~ weight.shucked)
abalone.lm_weight.viscera <- lm(data = abalone_data_cleansed, formula = rings ~ weight.viscera)
abalone.lm_weight.shell <- lm(data = abalone_data_cleansed, formula = rings ~ weight.shell)
abalone.r_squareds <- c(
summary(abalone.lm_length)$adj.r.squared,
summary(abalone.lm_diameter)$adj.r.squared,
summary(abalone.lm_height)$adj.r.squared,
summary(abalone.lm_weight.whole)$adj.r.squared,
summary(abalone.lm_weight.shucked)$adj.r.squared,
summary(abalone.lm_weight.viscera)$adj.r.squared,
summary(abalone.lm_weight.shell)$adj.r.squared
)
abalone_numeric_attr_no_rings <- abalone_numeric_attr[which(abalone_numeric_attr!="rings")]
#make a new dataframe from
dataframe.rsquareds <- data.frame(attributes = abalone_numeric_attr_no_rings, r_squared=abalone.r_squareds)
#get the order for the nearest neighbour starting with the greatest distance and descending
rsquareds_order <- order(dataframe.rsquareds$r_squared, decreasing=TRUE)
#now apply the order to the frame
sorted_attributes_by_r_squared <- dataframe.rsquareds[ rsquareds_order, ]
sorted_attributes_by_r_squared
#abalone.lm_length
# calculate correlation matrix
correlationMatrix <- cor(abalone_data_cleansed[,2:9])
# summarize the correlation matrix
print(correlationMatrix)
# find attributes that are highly corrected (ideally &gt;0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
abalone.correlation <- data.frame(correlation=correlationMatrix[,8])
#get rid of rings, that's obviously going to be max correlation to itself!
abalone.correlation <- data.frame(attributes=rownames(abalone.correlation)[1:7], 'correlation to rings'=abalone.correlation[1:7, 0:1])
#get the order for correlations
correlation_order <- order(abalone.correlation$correlation, decreasing=TRUE)
#now apply the order to the frame
sorted_correlation_order <- abalone.correlation[ correlation_order, 1:2]
print(sorted_correlation_order)
knitr::opts_chunk$set(echo = TRUE)
set.seed(4321)
set.seed(4321)
head(abalone_data_cleansed)
holdout.train_indeces <- createDataPartition(y = abalone_data_cleansed$weight.shell, p= 2/3, list = FALSE)
head(holdout.train_indeces, n=20)
holdout.training <- abalone_data_cleansed[holdout.train_indeces,]
holdout.testing <- abalone_data_cleansed[-holdout.train_indeces,]
dim(holdout.training)
dim(holdout.testing)
cv.train_control_8 <- trainControl(method="cv", number=8)
cv.train_control_8_5 <- trainControl(method="cv", number=8, repeats = 5)
cv.train_control_13_5 <- trainControl(method="cv", number=13, repeats = 5)
# define training control
loocv.train_control <- trainControl(method="LOOCV")
#method = 'J48'
#as.factor(
dt.c4_5_h <- J48(rings~., holdout.training)
if(!require(rJava)) install.packages('rJava')
if(!require(caret)) install.packages("caret", repos = mirrorUrl)
if(!require(RWeka)) install.packages("RWeka", repos = mirrorUrl)
#e1071
if(!require(e1071)) install.packages("e1071", repos = mirrorUrl)
#libcoin
if(!require(coin)) install.packages("coin", repos = mirrorUrl)
#partykit
if(!require(partykit)) install.packages("partykit", repos = mirrorUrl)
#rpart
if(!require(rpart.plot)) install.packages("rpart.plot", repos = mirrorUrl)
#
library("e1071")
library("caret")
library("RWeka")
library("rpart.plot")
library("libcoin")
library("partykit")
RWeka::J48
knitr::opts_chunk$set(echo = TRUE)
set.seed(4321)
set.seed(4321)
head(abalone_data_cleansed)
holdout.train_indeces <- createDataPartition(y = abalone_data_cleansed$weight.shell, p= 2/3, list = FALSE)
mirrorUrl = "http://cran.ma.imperial.ac.uk"
# Install and load all packages up-front!
if(!require(readxl)) install.packages("readxl", repos = mirrorUrl)
if(!require(Metrics)) install.packages("Metrics", repos = mirrorUrl)
if(!require(gridExtra)) install.packages("gridExtra", repos = mirrorUrl)
if(!require(scales)) install.packages("scales", repos = mirrorUrl)
if(!require(data.table)) install.packages("data.table", repos = mirrorUrl)
if(!require(ggplot2)) install.packages("ggplot2", repos = mirrorUrl)
if(!require(caret)) install.packages("caret", repos = mirrorUrl)
#
library("readxl")
library("Metrics")
library("scales")
library("data.table")
library(ggplot2)
library(grid)
library(gridExtra)
library(knitr)
library(caret)
knitr::opts_chunk$set(echo = TRUE)
set.seed(4321)
set.seed(4321)
head(abalone_data_cleansed)
holdout.train_indeces <- createDataPartition(y = abalone_data_cleansed$weight.shell, p= 2/3, list = FALSE)
head(holdout.train_indeces, n=20)
holdout.training <- abalone_data_cleansed[holdout.train_indeces,]
holdout.testing <- abalone_data_cleansed[-holdout.train_indeces,]
dim(holdout.training)
dim(holdout.testing)
cv.train_control_8 <- trainControl(method="cv", number=8)
cv.train_control_8_5 <- trainControl(method="cv", number=8, repeats = 5)
cv.train_control_13_5 <- trainControl(method="cv", number=13, repeats = 5)
# define training control
loocv.train_control <- trainControl(method="LOOCV")
